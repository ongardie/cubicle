# Based on https://github.com/actions-rs/example/blob/master/.github/workflows/quickstart.yml
# and https://github.com/ramosbugs/oauth2-rs/blob/main/.github/workflows/main.yml

name: CI

on:
  push:
    branches:
      - "main"
  pull_request: {}
  # Run daily to catch breakages in new Rust versions as well as new cargo
  # audit findings.
  schedule:
    - cron: "0 16 * * *"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch: {}

jobs:
  build:
    name: Build & check

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            rust: stable
          - os: ubuntu-20.04
            rust: nightly
          - os: macos-12
            rust: stable

    env:
      # Some checks like `cargo fmt` only need to run once, preferably on the
      # stable toolchain.
      STABLE_ONCE_CHECKS: ${{ matrix.os == 'ubuntu-20.04' && matrix.rust == 'stable' }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

        # See https://github.com/actions/cache/blob/main/examples.md#rust---cargo
      - name: Use Rust/Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: cargo-${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-${{ matrix.os }}-${{ matrix.rust }}-

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Run cargo fmt
        if: ${{ env.STABLE_ONCE_CHECKS == 'true' }}
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        if: ${{ env.STABLE_ONCE_CHECKS == 'true' }}
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Install cargo audit
        if: ${{ env.STABLE_ONCE_CHECKS == 'true' }}
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-audit

      - name: Run cargo audit
        if: ${{ env.STABLE_ONCE_CHECKS == 'true' }}
        uses: actions-rs/cargo@v1
        with:
          command: audit

      - name: Save build artifact
        # The uploader currently uses gzip internally and will aggressively and
        # slowly gzip anything it doesn't think is already compressed. It has
        # an exception for a very small number of file extensions, including
        # `.gz`. This uses `gzip -1` first, which saves a second or two. We can
        # switch to Zstd (which would save another couple of seconds) once this
        # PR is merged: <https://github.com/actions/toolkit/pull/1118>.
        run: |
          tar -C .. --create \
            cubicle/Dockerfile.in \
            cubicle/dev-init.sh \
            cubicle/packages/ \
            cubicle/target/debug/cubicle | \
          gzip -1 > debug-dist.tar.gz

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: debug-dist-${{ matrix.os }}-${{ matrix.rust }}
          path: debug-dist.tar.gz
          if-no-files-found: error

  system_test:
    name: System tests
    needs: build

    strategy:
      fail-fast: false
      matrix:
        rust: [stable]
        os: [ubuntu-20.04, macos-12]
        runner: [docker]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Docker
        # Docker isn't installed on the Mac runners due to licensing issues:
        # <https://github.com/actions/runner-images/issues/2150>.
        if: ${{ matrix.os == 'macos-12' }}
        run: brew install docker docker-machine

      - name: Create VirtualBox VM for Docker
        if: ${{ matrix.os == 'macos-12' }}
        # Normally docker-machine would check for the latest boot2docker URL,
        # but it gives the error: `Error with pre-create check: "failure
        # getting a version tag from the Github API response (are you getting
        # rate limited by Github?)"`. Its README says to pass
        # `--github-api-token`, but that doesn't work due to
        # <https://github.com/docker/machine/issues/2765> and
        # <https://github.com/docker/machine/issues/2296>. This just sets a
        # static URL. Because boot2docker is no longer maintained, there's no
        # risk of a newer ISO being released.

        # Then, set a different IPv4 range to work around this error:
        #
        # ```
        # Error creating machine: Error in driver during machine creation:
        #     Error setting up host only network on machine start:
        #     /usr/local/bin/VBoxManage hostonlyif ipconfig vboxnet0 --ip
        #     192.168.99.1 --netmask 255.255.255.0 failed:
        # VBoxManage: error: Code E_ACCESSDENIED (0x80070005) - Access denied
        #     (extended info not available)
        # VBoxManage: error: Context: "EnableStaticIPConfig(Bstr(pszIp).raw(),
        #     Bstr(pszNetmask).raw())" at line 242 of file VBoxManageHostonly.cpp
        # ```
        #
        # See <https://github.com/nektos/act/issues/858>.
        run: |
          docker-machine create \
            --driver virtualbox  \
            --virtualbox-boot2docker-url 'https://github.com/boot2docker/boot2docker/releases/download/v19.03.12/boot2docker.iso' \
            --virtualbox-hostonly-cidr '192.168.56.1/24' \
            default && \
          eval "$(docker-machine env default)" && \
          env | grep DOCKER >> $GITHUB_ENV

      - name: Docker hello world
        run: docker run --rm debian:11 echo "Hello world"

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: debug-dist-${{ matrix.os }}-${{ matrix.rust }}

      - name: Unpack build artifact
        run: tar --directory .. --extract --verbose --file debug-dist.tar.gz

      - name: Run cubicle list
        run: |
          echo 'runner = "${{ matrix.runner }}"' > ~/.config/cubicle.toml && \
          RUST_BACKTRACE=1 ./target/debug/cubicle list
