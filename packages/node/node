#!/bin/sh

# This script acts as `node`, `npm`, and `npx` from the NodeJS project. It
# determines which version to execute by looking up the filesystem for a
# `.nvmrc` file with a version number in it. If that version is not installed
# in `~/opt/node`, it downloads and installs it. Then it executes the invoked
# binary.

# In other words, this is a slightly more magical and more opinionated version
# of the Node Version Manager at https://github.com/nvm-sh/nvm.

set -e

start=$(pwd)

while true; do
  if [ -f .nvmrc ]; then
    VERSION=$(cat .nvmrc)
    break
  fi
  if [ $(pwd) = '/' ]; then
    # No .nvmrc file anywhere.
    VERSION='lts/*'
    break
  fi
  cd ..
done

find_version() {
  CACHE_HOME=${XDG_CACHE_HOME:-"$HOME/.cache"}
  VERSION_FILE="$CACHE_HOME/node-versions.json"
  if [ ! -f "$VERSION_FILE" ] || expr $(date +%s) - $(date +%s -r "$VERSION_FILE") '>' 60 '*' 60 '*' 24 > /dev/null; then
    echo "Updating $VERSION_FILE"
    mkdir -p "$CACHE_HOME"
    curl -L --max-time 2 --no-progress-meter https://nodejs.org/download/release/index.json -o "$VERSION_FILE" || [ -f "$VERSION_FILE" ]
  fi

  # Note: the jq patterns assume the version numbers are sorted in the JSON
  # file in descending order. This is a bit fragile, but jq doesn't do a
  # version sort and neither does `sort` on OS X.
  V=$(jq -r "$1" "$VERSION_FILE")
  if [ "$V" = "null" ]; then
    echo "Nonexistent node version in $(pwd)/.nvmrc: $VERSION"
    exit 1
  fi
  VERSION=$V
}

case $VERSION in
  node)
    find_version '.[0].version'
    ;;
  'lts/*' )
    find_version 'map(select(.lts)) | .[0].version'
    ;;

  # For technical reasons, these patterns only test that the first digit per
  # group is numeric. That's probably good enough.
  v[0-9]*.[0-9]*.[0-9]*)
    ;;
  [0-9]*.[0-9]*.[0-9]*)
    VERSION="v$VERSION"
    ;;
  v[0-9]* | v[0-9]*.[0-9]*)
    find_version "map(select(.version | startswith(\"$VERSION.\"))) | .[0].version"
    ;;
  [0-9]* | [0-9]*.[0-9]*)
    find_version "map(select(.version | startswith(\"v$VERSION.\"))) | .[0].version"
    ;;

  *)
    echo "Unsupported node version in $(pwd)/.nvmrc: $VERSION"
    exit 1
    ;;
esac


DIR="$HOME/opt/node/$VERSION/bin"

if [ ! -d "$DIR" ]; then
  echo "Installing node $VERSION"
  install-node "$VERSION"
fi

BIN=$(basename "$0")
cd "$start"
if [ $BIN = npm ]; then
  exec "$DIR/npm" --scripts-prepend-node-path=true "$@"
else
  exec "$DIR/$BIN" "$@"
fi
